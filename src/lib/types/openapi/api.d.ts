/* eslint-disable @typescript-eslint/naming-convention */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/product": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all products
     * @description Retrieve a paginated list of all products with optional search capabilities
     */
    get: operations["ProductController_findAll"];
    put?: never;
    /**
     * Create product
     * @description Create a new product with all required details
     */
    post: operations["ProductController_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/product/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get product by ID
     * @description Retrieve detailed information about a specific product by its ID
     */
    get: operations["ProductController_findOne"];
    put?: never;
    post?: never;
    /**
     * Delete product
     * @description Remove a product from the system
     */
    delete: operations["ProductController_remove"];
    options?: never;
    head?: never;
    /**
     * Update product
     * @description Update an existing product information such as name, GTIN, alcohol code, etc.
     */
    patch: operations["ProductController_update"];
    trace?: never;
  };
  "/product/{id}/status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update product status
     * @description Change product status (ACTIVE, INACTIVE, PAUSED, etc.)
     */
    patch: operations["ProductController_updateStatus"];
    trace?: never;
  };
  "/product/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search products
     * @description Search for products by name, GTIN, alcohol code or other attributes
     */
    get: operations["ProductController_search"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Find all users
     * @description Get paginated list of all registered users in the system
     */
    get: operations["UserController_findAll"];
    put?: never;
    /**
     * Create user
     * @description Register a new user in the system with email and password
     */
    post: operations["UserController_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Find user by ID
     * @description Get detailed information about a specific user by their ID
     */
    get: operations["UserController_findOne"];
    put?: never;
    post?: never;
    /**
     * Delete user
     * @description Remove a user from the system
     */
    delete: operations["UserController_remove"];
    options?: never;
    head?: never;
    /**
     * Update user
     * @description Update user information such as name, email, or other profile data
     */
    patch: operations["UserController_update"];
    trace?: never;
  };
  "/user/auth/sign-in": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Sign in user
     * @description Authenticate user with email and password and return JWT token
     */
    post: operations["UserController_signIn"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/auth/reset-password-request": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Reset password request
     * @description Request a password reset by providing an email, sends reset link to user email
     */
    post: operations["UserController_resetRequest"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/auth/reset-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Reset password
     * @description Reset user password using token received via email
     */
    post: operations["UserController_resetPasswordAfterRequest"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/auth/revoke-token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Revoke token
     * @description Revoke the current JWT token (logout)
     */
    post: operations["UserController_revokeToken"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/auth/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get current user
     * @description Get details of the currently authenticated user
     */
    get: operations["UserController_getMe"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/code/individual": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create individual codes
     * @description Create new individual product codes and store them in the database with product association
     */
    post: operations["CodeController_writeIndividualCode"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/code/boxes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate SSCC code
     * @description Generate next SSCC code for boxes and store it in the database
     */
    post: operations["CodeController_getNextSscc"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/code/pack": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Pack codes
     * @description Pack individual codes into a box and generate a new SSCC code
     */
    post: operations["CodeController_packCodes"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/code/update-status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Update codes status
     * @description Update the status of multiple individual codes and link them to a shift
     */
    post: operations["CodeController_updateCodesStatus"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/code/download": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download codes as text file
     * @description Download codes for a specific shift as a text file. Can include box codes if requested.
     */
    get: operations["CodeController_downloadCodes"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/operator": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all operators
     * @description Retrieve a paginated list of all operators in the system
     */
    get: operations["OperatorController_findAll"];
    put?: never;
    /**
     * Create operator
     * @description Create a new operator account in the system
     */
    post: operations["OperatorController_createOperator"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/operator/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update operator
     * @description Update operator information such as name or barcode
     */
    patch: operations["OperatorController_updateOperator"];
    trace?: never;
  };
  "/operator/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Login operator
     * @description Authenticate an operator using barcode and return JWT token
     */
    post: operations["OperatorController_login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/operator/one/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get operator by ID
     * @description Retrieve detailed information about a specific operator
     */
    get: operations["OperatorController_findOne"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/operator/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get current operator
     * @description Get details of the currently authenticated operator
     */
    get: operations["OperatorController_getMe"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shift": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all shifts
     * @description Retrieve a paginated list of all production shifts
     */
    get: operations["ShiftController_findAll"];
    put?: never;
    /**
     * Create shift
     * @description Create a new production shift with product and planning details
     */
    post: operations["ShiftController_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shift/operator": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all shifts for operator
     * @description Retrieve a paginated list of all production shifts accessible by operators
     */
    get: operations["ShiftController_findAllForApp"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shift/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get shift by ID
     * @description Retrieve detailed information about a specific production shift
     */
    get: operations["ShiftController_findOne"];
    put?: never;
    post?: never;
    /**
     * Delete shift
     * @description Remove a production shift from the system
     */
    delete: operations["ShiftController_remove"];
    options?: never;
    head?: never;
    /**
     * Update shift
     * @description Update information about an existing production shift such as planned count, status, etc.
     */
    patch: operations["ShiftController_update"];
    trace?: never;
  };
  "/shift/operator/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get shift by ID for operator
     * @description Retrieve detailed information about a specific production shift for operators
     */
    get: operations["ShiftController_findOneForApp"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shift/operator/create": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create shift by operator
     * @description Create a new production shift by operator using EAN/GTIN code
     */
    post: operations["ShiftController_createByOperator"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/saby/order/delivery": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all delivery orders
     * @description Retrieves a paginated list of delivery orders from the SABY system with optional filtering
     */
    get: operations["SabyController_findAll"];
    put?: never;
    /**
     * Create delivery order
     * @description Creates a new delivery order in the SABY system
     */
    post: operations["SabyController_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/saby/order/delivery/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get delivery order by ID
     * @description Retrieves a specific delivery order from the SABY system by its ID
     */
    get: operations["SabyController_findOne"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update delivery order
     * @description Updates an existing delivery order in the SABY system by its ID
     */
    patch: operations["SabyController_update"];
    trace?: never;
  };
  "/saby/order/delivery/change": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Update delivery order from SABY
     * @description Updates a delivery order with information received from the SABY system
     */
    put: operations["SabyController_updateFromSaby"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    CreateProductDto: {
      shortName: string;
      fullName: string;
      gtin: string;
      alcoholCode: string;
      expirationInDays: number;
      volume:
        | number
        | string
        | unknown
        | {
            d: number[];
            e: number;
            s: number;
            toFixed: unknown;
          };
      pictureUrl: string | null;
      /** @enum {string} */
      status?: "ACTIVE" | "INACTIVE" | "PAUSED" | "REGISTRATION" | "ARCHIVED";
    };
    CreatedProductId: {
      /** @description The unique identifier for the product */
      id: string;
    };
    SelectProductDto: {
      /** @enum {string} */
      status: "ACTIVE" | "INACTIVE" | "PAUSED" | "REGISTRATION" | "ARCHIVED";
      /** @description The unique identifier for the product */
      id: string;
      shortName: string;
      fullName: string;
      gtin: string;
      alcoholCode: string;
      expirationInDays: number;
      volume: unknown;
      pictureUrl: string | null;
      created: unknown;
      modified: unknown;
    };
    IProductFindMany: {
      result: components["schemas"]["SelectProductDto"][];
      total: number;
      page: number;
      limit: number;
      totalPage: number;
    };
    UpdateProductDto: {
      id?:
        | string
        | {
            set?: string;
          };
      shortName?:
        | string
        | {
            set?: string;
          };
      fullName?:
        | string
        | {
            set?: string;
          };
      gtin?:
        | string
        | {
            set?: string;
          };
      alcoholCode?:
        | string
        | {
            set?: string;
          };
      expirationInDays?:
        | number
        | {
            set?: number;
            increment?: number;
            decrement?: number;
            multiply?: number;
            divide?: number;
          };
      volume?:
        | (
            | number
            | string
            | unknown
            | {
                d: number[];
                e: number;
                s: number;
                toFixed: unknown;
              }
          )
        | {
            set?:
              | number
              | string
              | unknown
              | {
                  d: number[];
                  e: number;
                  s: number;
                  toFixed: unknown;
                };
            increment?:
              | number
              | string
              | unknown
              | {
                  d: number[];
                  e: number;
                  s: number;
                  toFixed: unknown;
                };
            decrement?:
              | number
              | string
              | unknown
              | {
                  d: number[];
                  e: number;
                  s: number;
                  toFixed: unknown;
                };
            multiply?:
              | number
              | string
              | unknown
              | {
                  d: number[];
                  e: number;
                  s: number;
                  toFixed: unknown;
                };
            divide?:
              | number
              | string
              | unknown
              | {
                  d: number[];
                  e: number;
                  s: number;
                  toFixed: unknown;
                };
          };
      pictureUrl:
        | (
            | string
            | {
                set: string | null;
              }
          )
        | null;
      status?:
        | ("ACTIVE" | "INACTIVE" | "PAUSED" | "REGISTRATION" | "ARCHIVED")
        | {
            /** @enum {string} */
            set?:
              | "ACTIVE"
              | "INACTIVE"
              | "PAUSED"
              | "REGISTRATION"
              | "ARCHIVED";
          };
      created?:
        | unknown
        | {
            set?: unknown;
          };
      modified:
        | (
            | unknown
            | {
                set: unknown;
              }
          )
        | null;
    };
    UpdateProductStatusDto: {
      /**
       * @example ACTIVE
       * @enum {string}
       */
      status: "ACTIVE" | "INACTIVE" | "PAUSED" | "REGISTRATION" | "ARCHIVED";
    };
    CreateUserDto: {
      email: string;
      firstName: string;
      lastName: string;
      password: string;
      picture?: string;
    };
    CreatedUserDto: {
      id: string;
      email: string;
      firstName: string;
      lastName: string;
      password?: string;
      picture: string | null;
      /** @enum {string} */
      role: "ADMIN" | "SUPERVISOR" | "USER" | "GUEST";
      created: unknown;
      modified: unknown;
    };
    IUserFindOne: {
      result: components["schemas"]["CreatedUserDto"];
    };
    IUserFindMany: {
      result: components["schemas"]["CreatedUserDto"][];
      total: number;
      page: number;
      limit: number;
      totalPage: number;
    };
    UpdateUserDto: {
      email?: string;
      firstName?: string;
      lastName?: string;
      password?: string;
      picture?: string;
      /** @enum {string} */
      role?: "ADMIN" | "SUPERVISOR" | "USER" | "GUEST";
    };
    SignInDto: {
      /** Format: email */
      email: string;
      password: string;
    };
    UserLoginResponse: {
      user: components["schemas"]["CreatedUserDto"];
    };
    ResetPasswordRequestDto: {
      /** Format: email */
      email: string;
    };
    ResetPasswordDto: {
      userId: string;
      password: string;
      token: string;
    };
    WriteIndividualCodeDto: {
      code: string[];
      /** @enum {string} */
      status: "NEW" | "USED";
      productId: string;
      boxesCodeId?: number;
      shiftId?: string;
    };
    WriteBoxesCodeDto: {
      gln?: string;
      productId: string;
      currentSscc?: string;
    };
    BoxesCodeDataDto: {
      id: number;
      gln: string;
      counter: number;
      sscc: string;
      productId: string;
      created: unknown;
      modified: unknown;
      shiftId: string | null;
    };
    PackCodesDto: {
      id: number;
      ssccCode: string;
      codes: string[];
      shiftId: string;
      productId: string;
    };
    PackedCodesResponseDto: {
      id: number;
      ssccCode: string;
    };
    UpdateCodesStatusDto: {
      codes: string[];
      shiftId: string;
      productId?: string;
    };
    CreateOperatorDto: {
      name: string;
      barcode?: string;
    };
    CreatedOperatorDto: {
      id: string;
      name: string;
      barcode: string | null;
      created: unknown;
      modified: unknown;
    };
    UpdateOperatorDto: {
      regenerateBarcode?: boolean;
      name?: string;
    };
    IOperatorFindOne: {
      result: components["schemas"]["CreatedOperatorDto"];
    };
    LoginOperatorDto: {
      barcode: string;
    };
    OperatorLoginResponse: {
      token: string;
    };
    IOperatorFindMany: {
      result: components["schemas"]["CreatedOperatorDto"][];
      total: number;
      page: number;
      limit: number;
      totalPage: number;
    };
    CreateShiftDto: {
      id?: string;
      plannedDate?: unknown;
      plannedCount: number | null;
      factCount: number | null;
      packing?: boolean;
      countInBox: number | null;
      /** @enum {string} */
      status?: "PLANNED" | "INPROGRESS" | "PAUSED" | "DONE" | "CANCELED";
      productId: string;
    };
    ShiftDto: {
      /** @enum {string} */
      status: "PLANNED" | "INPROGRESS" | "PAUSED" | "DONE" | "CANCELED";
      id: string;
      plannedDate: unknown;
      productId: string;
      plannedCount: number | null;
      factCount: number | null;
      packing: boolean;
      countInBox: number | null;
      operatorId: string | null;
      created: unknown;
      modified: unknown;
    };
    OperatorShiftDto: {
      /** @enum {string} */
      status: "PLANNED" | "INPROGRESS" | "PAUSED" | "DONE" | "CANCELED";
      id: string;
      plannedDate: unknown;
      product: {
        /** @enum {string} */
        status: "ACTIVE" | "INACTIVE" | "PAUSED" | "REGISTRATION" | "ARCHIVED";
        /** @description The unique identifier for the product */
        id: string;
        shortName: string;
        fullName: string;
        gtin: string;
        alcoholCode: string;
        expirationInDays: number;
        volume: unknown;
        pictureUrl: string | null;
        created: unknown;
        modified: unknown;
      };
      plannedCount: number | null;
      factCount: number | null;
      packing: boolean;
      countInBox: number | null;
      operatorId: string | null;
      created: unknown;
      modified: unknown;
    };
    IShiftFindMany: {
      result: components["schemas"]["OperatorShiftDto"][];
      total: number;
      page: number;
      limit: number;
      totalPage: number;
      labelTemplate?: string;
    };
    IShiftFindOne: {
      result: components["schemas"]["OperatorShiftDto"];
    };
    UpdateShiftDto: {
      plannedDate?: unknown;
      plannedCount?: number;
      packing?: boolean;
      countInBox?: number;
      /** @enum {string} */
      status?: "PLANNED" | "INPROGRESS" | "PAUSED" | "DONE" | "CANCELED";
    };
    CreateShiftByOperatorDto: {
      ean: string;
      plannedDay?: unknown;
    };
    IDeletedShift: {
      id: string;
      message: string;
    };
    CreateOrderToDeliveryDto: {
      id?: string;
      orderNumber: string;
      deliveryDate: unknown;
      /** @enum {string} */
      status?: "NEW" | "ARCHIVE";
      consignee: string;
      address: string;
      created?: unknown;
      modified?: unknown;
    };
    CreatedOrderToDeliveryId: {
      /** @description The unique identifier for the order */
      id: string;
    };
    SelectOrderToDeliveryDto: {
      /** @enum {string} */
      status: "NEW" | "ARCHIVE";
      id: string;
      orderNumber: string;
      deliveryDate: unknown;
      consignee: string;
      address: string;
      created: unknown;
      modified: unknown;
    };
    UpdateOrderToDeliveryDto: {
      id: string;
      orderNumber?: string;
      deliveryDate?: unknown;
      /** @enum {string} */
      status?: "NEW" | "ARCHIVE";
      consignee?: string;
      address?: string;
    };
    IOrderToDeliveryFindMany: {
      result: components["schemas"]["SelectOrderToDeliveryDto"][];
      total: number;
      page: number;
      limit: number;
      totalPage: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  ProductController_findAll: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Items per page */
        limit?: number;
        /** @description Search string */
        search?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IProductFindMany"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProductController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Json structure for product object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProductDto"];
      };
    };
    responses: {
      /** @description The record has been successfully created. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreatedProductId"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProductController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SelectProductDto"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Product not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProductController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Product successfully deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Product not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProductController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    /** @description Json structure for product object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProductDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateProductDto"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Product not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProductController_updateStatus: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    /** @description Json structure for product status */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProductStatusDto"];
      };
    };
    responses: {
      /** @description Product status successfully updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateProductDto"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Product not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProductController_search: {
    parameters: {
      query: {
        search: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SelectProductDto"][];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_findAll: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Items per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns a list of users */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IUserFindMany"];
        };
      };
    };
  };
  UserController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      /** @description User successfully created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IUserFindOne"];
        };
      };
      /** @description Data isn't unique */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the requested user */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IUserFindOne"];
        };
      };
      /** @description User can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User successfully deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserDto"];
      };
    };
    responses: {
      /** @description User successfully updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IUserFindOne"];
        };
      };
      /** @description User can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_signIn: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignInDto"];
      };
    };
    responses: {
      /** @description User successfully signed in, JWT token set in cookies */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserLoginResponse"];
        };
      };
      /** @description Invalid credentials */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_resetRequest: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordRequestDto"];
      };
    };
    responses: {
      /** @description Reset password request processed successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_resetPasswordAfterRequest: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordDto"];
      };
    };
    responses: {
      /** @description Password has been successfully reset */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_revokeToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Token successfully revoked */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Token ID (jti) is missing */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_getMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns current user information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IUserFindOne"];
        };
      };
      /** @description User ID (sub) is missing */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CodeController_writeIndividualCode: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WriteIndividualCodeDto"];
      };
    };
    responses: {
      /** @description Codes successfully created and stored in database */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description Number of codes created */
            count?: number;
            /** @description Array of created codes */
            codes?: {
              id?: number;
              code?: string;
              productId?: string;
              status?: string;
            }[];
          };
        };
      };
      /** @description Invalid input format or validation error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CodeController_getNextSscc: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WriteBoxesCodeDto"];
      };
    };
    responses: {
      /** @description Code successfully created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BoxesCodeDataDto"];
        };
      };
      /** @description Invalid input data or SSCC format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description No previous SSCC codes found in database */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CodeController_packCodes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PackCodesDto"];
      };
    };
    responses: {
      /** @description Codes successfully packed and new SSCC code created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PackedCodesResponseDto"];
        };
      };
      /** @description Invalid input data format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Box code or individual codes not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CodeController_updateCodesStatus: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCodesStatusDto"];
      };
    };
    responses: {
      /** @description Codes status successfully updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid input data format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Shift or individual codes not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  CodeController_downloadCodes: {
    parameters: {
      query: {
        /** @description Whether to include box codes in the download */
        includeBoxes?: boolean;
        /** @description ID of the shift to download codes for */
        shiftId: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Text file with codes successfully generated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain": string;
        };
      };
      /** @description Invalid input data format */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Shift not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OperatorController_findAll: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Items per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns a list of operators */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IOperatorFindMany"];
        };
      };
    };
  };
  OperatorController_createOperator: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOperatorDto"];
      };
    };
    responses: {
      /** @description User successfully created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreatedOperatorDto"];
        };
      };
    };
  };
  OperatorController_updateOperator: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateOperatorDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IOperatorFindOne"];
        };
      };
      /** @description Operator not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OperatorController_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginOperatorDto"];
      };
    };
    responses: {
      /** @description Operator login successful */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OperatorLoginResponse"];
        };
      };
    };
  };
  OperatorController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the requested operator */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IOperatorFindOne"];
        };
      };
      /** @description Operator can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OperatorController_getMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns current operator information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IOperatorFindOne"];
        };
      };
      /** @description Unauthorized or operator token missing */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ShiftController_findAll: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Items per page */
        limit?: number;
        /** @description Search by shift ID, product short name, or product full name */
        search?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns a list of shifts */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IShiftFindMany"];
        };
      };
    };
  };
  ShiftController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateShiftDto"];
      };
    };
    responses: {
      /** @description Shift successfully created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ShiftDto"];
        };
      };
      /** @description Data isn't unique */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ShiftController_findAllForApp: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Items per page */
        limit?: number;
        /** @description Search by shift ID, product short name, or product full name */
        search?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns a list of shifts */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IShiftFindMany"];
        };
      };
    };
  };
  ShiftController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the requested shift */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IShiftFindOne"];
        };
      };
      /** @description Shift can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ShiftController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Shift has been deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IDeletedShift"];
        };
      };
      /** @description Shift can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ShiftController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    /** @description Json structure for updating shift */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateShiftDto"];
      };
    };
    responses: {
      /** @description Shift successfully updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ShiftDto"];
        };
      };
      /** @description Shift can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ShiftController_findOneForApp: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the requested shift */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IShiftFindOne"];
        };
      };
      /** @description Shift can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ShiftController_createByOperator: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateShiftByOperatorDto"];
      };
    };
    responses: {
      /** @description Shift successfully created by operator */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IShiftFindOne"];
        };
      };
      /** @description Invalid data or product not found */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Product with specified GTIN not found or not active */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SabyController_findAll: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Items per page */
        limit?: number;
        /** @description Order status filter */
        status?: "NEW" | "ARCHIVE";
        /** @description Search string */
        search?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IOrderToDeliveryFindMany"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SabyController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Json structure for order object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrderToDeliveryDto"];
      };
    };
    responses: {
      /** @description The record has been successfully created. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreatedOrderToDeliveryId"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SabyController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SelectOrderToDeliveryDto"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Order not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SabyController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    /** @description Json structure for order object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateOrderToDeliveryDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateOrderToDeliveryDto"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Order not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SabyController_updateFromSaby: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Json structure for order object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateOrderToDeliveryDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateOrderToDeliveryDto"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Order not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
