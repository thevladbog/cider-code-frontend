/* eslint-disable @typescript-eslint/naming-convention */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/product": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["ProductController_findAll"];
    put?: never;
    post: operations["ProductController_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/product/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["ProductController_findOne"];
    put?: never;
    post?: never;
    delete: operations["ProductController_remove"];
    options?: never;
    head?: never;
    patch: operations["ProductController_update"];
    trace?: never;
  };
  "/product/{id}/status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations["ProductController_updateStatus"];
    trace?: never;
  };
  "/product/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["ProductController_search"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["UserController_findAll"];
    put?: never;
    post: operations["UserController_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["UserController_findOne"];
    put?: never;
    post?: never;
    delete: operations["UserController_remove"];
    options?: never;
    head?: never;
    patch: operations["UserController_update"];
    trace?: never;
  };
  "/user/auth/sign-in": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["UserController_signIn"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/auth/revoke-token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["UserController_revokeToken"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/user/auth/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["UserController_getMe"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/code/individual": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["CodeController_writeIndividualCode"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/code/boxes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["CodeController_getNextSscc"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/operator": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["OperatorController_findAll"];
    put?: never;
    post: operations["OperatorController_createOperator"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/operator/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch: operations["OperatorController_updateOperator"];
    trace?: never;
  };
  "/operator/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["OperatorController_login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/operator/one/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["OperatorController_findOne"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/operator/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["OperatorController_getMe"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shift": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["ShiftController_findAll"];
    put?: never;
    post: operations["ShiftController_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shift/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["ShiftController_findOne"];
    put?: never;
    post?: never;
    delete: operations["ShiftController_remove"];
    options?: never;
    head?: never;
    patch: operations["ShiftController_update"];
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    CreateProductDto: {
      /** @description The unique identifier for the product */
      id?: string;
      shortName: string;
      fullName: string;
      gtin: string;
      alcoholCode: string;
      expirationInDays: number;
      volume:
        | number
        | string
        | unknown
        | {
            d: number[];
            e: number;
            s: number;
            toFixed: unknown;
          };
      pictureUrl: string | null;
      /** @enum {string} */
      status?: "ACTIVE" | "INACTIVE" | "PAUSED" | "REGISTRATION" | "ARCHIVED";
      created?: unknown;
      modified: unknown;
    };
    CreatedProductId: {
      /** @description The unique identifier for the product */
      id: string;
    };
    SelectProductDto: {
      /** @enum {string} */
      status: "ACTIVE" | "INACTIVE" | "PAUSED" | "REGISTRATION" | "ARCHIVED";
      /** @description The unique identifier for the product */
      id: string;
      shortName: string;
      fullName: string;
      gtin: string;
      alcoholCode: string;
      expirationInDays: number;
      volume: unknown;
      pictureUrl: string | null;
      created: unknown;
      modified: unknown;
    };
    IProductFindMany: {
      result: components["schemas"]["SelectProductDto"][];
      total: number;
      page: number;
      limit: number;
      totalPage: number;
    };
    UpdateProductDto: {
      id?:
        | string
        | {
            set?: string;
          };
      shortName?:
        | string
        | {
            set?: string;
          };
      fullName?:
        | string
        | {
            set?: string;
          };
      gtin?:
        | string
        | {
            set?: string;
          };
      alcoholCode?:
        | string
        | {
            set?: string;
          };
      expirationInDays?:
        | number
        | {
            set?: number;
            increment?: number;
            decrement?: number;
            multiply?: number;
            divide?: number;
          };
      volume?:
        | (
            | number
            | string
            | unknown
            | {
                d: number[];
                e: number;
                s: number;
                toFixed: unknown;
              }
          )
        | {
            set?:
              | number
              | string
              | unknown
              | {
                  d: number[];
                  e: number;
                  s: number;
                  toFixed: unknown;
                };
            increment?:
              | number
              | string
              | unknown
              | {
                  d: number[];
                  e: number;
                  s: number;
                  toFixed: unknown;
                };
            decrement?:
              | number
              | string
              | unknown
              | {
                  d: number[];
                  e: number;
                  s: number;
                  toFixed: unknown;
                };
            multiply?:
              | number
              | string
              | unknown
              | {
                  d: number[];
                  e: number;
                  s: number;
                  toFixed: unknown;
                };
            divide?:
              | number
              | string
              | unknown
              | {
                  d: number[];
                  e: number;
                  s: number;
                  toFixed: unknown;
                };
          };
      pictureUrl:
        | (
            | string
            | {
                set: string | null;
              }
          )
        | null;
      status?:
        | ("ACTIVE" | "INACTIVE" | "PAUSED" | "REGISTRATION" | "ARCHIVED")
        | {
            /** @enum {string} */
            set?:
              | "ACTIVE"
              | "INACTIVE"
              | "PAUSED"
              | "REGISTRATION"
              | "ARCHIVED";
          };
      created?:
        | unknown
        | {
            set?: unknown;
          };
      modified:
        | (
            | unknown
            | {
                set: unknown;
              }
          )
        | null;
    };
    UpdateProductStatusDto: {
      /**
       * @example ACTIVE
       * @enum {string}
       */
      status: "ACTIVE" | "INACTIVE" | "PAUSED" | "REGISTRATION" | "ARCHIVED";
    };
    CreateUserDto: {
      id?: string;
      email: string;
      firstName: string;
      lastName: string;
      password: string;
      created?: unknown;
      modified: unknown;
    };
    CreatedUserDto: {
      id: string;
      email: string;
      firstName: string;
      lastName: string;
      password?: string;
      created: unknown;
      modified: unknown;
    };
    IUserFindOne: {
      result: components["schemas"]["CreatedUserDto"];
    };
    IUserFindMany: {
      result: components["schemas"]["CreatedUserDto"][];
      total: number;
      page: number;
      limit: number;
      totalPage: number;
    };
    UpdateUserDto: Record<string, never>;
    SignInDto: {
      /** Format: email */
      email: string;
      password: string;
    };
    WriteIndividualCodeDto: {
      code: string;
      /** @enum {string} */
      status: "NEW" | "USED";
      productId: string;
      boxesCodeId?: number;
      shiftId?: string;
    };
    IndividualCodeDataDto: {
      /** @enum {string} */
      status: "NEW" | "USED";
      id: number;
      code: string;
      productId: string;
      created: unknown;
      modified: unknown;
      boxesCodeId: number | null;
      shiftId: string | null;
    };
    WriteBoxesCodeDto: {
      gln: string;
      productId: string;
      currentSscc?: string;
    };
    BoxesCodeDataDto: {
      id: number;
      gln: string;
      counter: number;
      sscc: string;
      productId: string;
      created: unknown;
      modified: unknown;
      shiftId: string | null;
    };
    CreateOperatorDto: {
      name: string;
      barcode?: string;
    };
    CreatedOperatorDto: {
      id: string;
      name: string;
      barcode: string | null;
      created: unknown;
      modified: unknown;
    };
    UpdateOperatorDto: {
      regenerateBarcode?: boolean;
      name?: string;
    };
    IOperatorFindOne: {
      result: components["schemas"]["CreatedOperatorDto"];
    };
    LoginOperatorDto: {
      barcode: string;
    };
    IOperatorFindMany: {
      result: components["schemas"]["CreatedOperatorDto"][];
      total: number;
      page: number;
      limit: number;
      totalPage: number;
    };
    CreateShiftDto: {
      id?: string;
      plannedDate?: unknown;
      plannedCount: number | null;
      factCount: number | null;
      packing?: boolean;
      countInBox: number | null;
      /** @enum {string} */
      status?: "PLANNED" | "INPROGRESS" | "PAUSED" | "DONE" | "CANCELED";
      productId: string;
    };
    ShiftDto: {
      /** @enum {string} */
      status: "PLANNED" | "INPROGRESS" | "PAUSED" | "DONE" | "CANCELED";
      id: string;
      plannedDate: unknown;
      productId: string;
      plannedCount: number | null;
      factCount: number | null;
      packing: boolean;
      countInBox: number | null;
      operatorId: string | null;
      created: unknown;
      modified: unknown;
    };
    IShiftFindMany: {
      result: components["schemas"]["ShiftDto"][];
      total: number;
      page: number;
      limit: number;
      totalPage: number;
    };
    IShiftFindOne: {
      result: components["schemas"]["ShiftDto"];
    };
    UpdateShiftDto: Record<string, never>;
    IDeletedShift: {
      id: string;
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  ProductController_findAll: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Items per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IProductFindMany"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProductController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Json structure for product object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProductDto"];
      };
    };
    responses: {
      /** @description The record has been successfully created. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreatedProductId"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProductController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SelectProductDto"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProductController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProductController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    /** @description Json structure for product object */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProductDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateProductDto"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProductController_updateStatus: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    /** @description Json structure for product status */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProductStatusDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateProductDto"];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ProductController_search: {
    parameters: {
      query: {
        search: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SelectProductDto"][];
        };
      };
      /** @description Forbidden. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_findAll: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Items per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns a list of users */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IUserFindMany"];
        };
      };
    };
  };
  UserController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      /** @description User successfully created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IUserFindOne"];
        };
      };
      /** @description Data isn't unique */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the requested user */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IUserFindOne"];
        };
      };
      /** @description User can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IUserFindOne"];
        };
      };
      /** @description User can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_signIn: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignInDto"];
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_revokeToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UserController_getMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IUserFindOne"];
        };
      };
    };
  };
  CodeController_writeIndividualCode: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WriteIndividualCodeDto"];
      };
    };
    responses: {
      /** @description Code successfully created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IndividualCodeDataDto"];
        };
      };
    };
  };
  CodeController_getNextSscc: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WriteBoxesCodeDto"];
      };
    };
    responses: {
      /** @description Code successfully created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BoxesCodeDataDto"];
        };
      };
    };
  };
  OperatorController_findAll: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Items per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns a list of users */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IOperatorFindMany"];
        };
      };
    };
  };
  OperatorController_createOperator: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOperatorDto"];
      };
    };
    responses: {
      /** @description User successfully created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreatedOperatorDto"];
        };
      };
    };
  };
  OperatorController_updateOperator: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateOperatorDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IOperatorFindOne"];
        };
      };
      /** @description Operator not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OperatorController_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginOperatorDto"];
      };
    };
    responses: {
      /** @description Operator login successful */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": boolean;
        };
      };
    };
  };
  OperatorController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the requested user */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IOperatorFindOne"];
        };
      };
      /** @description User can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  OperatorController_getMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IOperatorFindOne"];
        };
      };
    };
  };
  ShiftController_findAll: {
    parameters: {
      query?: {
        /** @description Page number */
        page?: number;
        /** @description Items per page */
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns a list of shifts */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IShiftFindMany"];
        };
      };
    };
  };
  ShiftController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateShiftDto"];
      };
    };
    responses: {
      /** @description Shift successfully created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ShiftDto"];
        };
      };
      /** @description Data isn't unique */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ShiftController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the requested shift */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IShiftFindOne"];
        };
      };
      /** @description Shift can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ShiftController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Shift has been deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IDeletedShift"];
        };
      };
      /** @description Shift can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ShiftController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateShiftDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ShiftDto"];
        };
      };
      /** @description Shift can't be found or something went wrong */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
