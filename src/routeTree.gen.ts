/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as AuthImport } from "./routes/_auth";
import { Route as LoginIndexImport } from "./routes/login/index";
import { Route as AuthIndexImport } from "./routes/_auth.index";
import { Route as LoginResetImport } from "./routes/login/reset";
import { Route as AuthUsersImport } from "./routes/_auth.users";
import { Route as AuthProductsImport } from "./routes/_auth.products";
import { Route as AuthPrivacyImport } from "./routes/_auth.privacy";

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any);

const LoginIndexRoute = LoginIndexImport.update({
  id: "/login/",
  path: "/login/",
  getParentRoute: () => rootRoute,
} as any);

const AuthIndexRoute = AuthIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AuthRoute,
} as any);

const LoginResetRoute = LoginResetImport.update({
  id: "/login/reset",
  path: "/login/reset",
  getParentRoute: () => rootRoute,
} as any);

const AuthUsersRoute = AuthUsersImport.update({
  id: "/users",
  path: "/users",
  getParentRoute: () => AuthRoute,
} as any);

const AuthProductsRoute = AuthProductsImport.update({
  id: "/products",
  path: "/products",
  getParentRoute: () => AuthRoute,
} as any);

const AuthPrivacyRoute = AuthPrivacyImport.update({
  id: "/privacy",
  path: "/privacy",
  getParentRoute: () => AuthRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_auth": {
      id: "/_auth";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/privacy": {
      id: "/_auth/privacy";
      path: "/privacy";
      fullPath: "/privacy";
      preLoaderRoute: typeof AuthPrivacyImport;
      parentRoute: typeof AuthImport;
    };
    "/_auth/products": {
      id: "/_auth/products";
      path: "/products";
      fullPath: "/products";
      preLoaderRoute: typeof AuthProductsImport;
      parentRoute: typeof AuthImport;
    };
    "/_auth/users": {
      id: "/_auth/users";
      path: "/users";
      fullPath: "/users";
      preLoaderRoute: typeof AuthUsersImport;
      parentRoute: typeof AuthImport;
    };
    "/login/reset": {
      id: "/login/reset";
      path: "/login/reset";
      fullPath: "/login/reset";
      preLoaderRoute: typeof LoginResetImport;
      parentRoute: typeof rootRoute;
    };
    "/_auth/": {
      id: "/_auth/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof AuthIndexImport;
      parentRoute: typeof AuthImport;
    };
    "/login/": {
      id: "/login/";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthPrivacyRoute: typeof AuthPrivacyRoute;
  AuthProductsRoute: typeof AuthProductsRoute;
  AuthUsersRoute: typeof AuthUsersRoute;
  AuthIndexRoute: typeof AuthIndexRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthPrivacyRoute: AuthPrivacyRoute,
  AuthProductsRoute: AuthProductsRoute,
  AuthUsersRoute: AuthUsersRoute,
  AuthIndexRoute: AuthIndexRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
  "": typeof AuthRouteWithChildren;
  "/privacy": typeof AuthPrivacyRoute;
  "/products": typeof AuthProductsRoute;
  "/users": typeof AuthUsersRoute;
  "/login/reset": typeof LoginResetRoute;
  "/": typeof AuthIndexRoute;
  "/login": typeof LoginIndexRoute;
}

export interface FileRoutesByTo {
  "/privacy": typeof AuthPrivacyRoute;
  "/products": typeof AuthProductsRoute;
  "/users": typeof AuthUsersRoute;
  "/login/reset": typeof LoginResetRoute;
  "/": typeof AuthIndexRoute;
  "/login": typeof LoginIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/_auth": typeof AuthRouteWithChildren;
  "/_auth/privacy": typeof AuthPrivacyRoute;
  "/_auth/products": typeof AuthProductsRoute;
  "/_auth/users": typeof AuthUsersRoute;
  "/login/reset": typeof LoginResetRoute;
  "/_auth/": typeof AuthIndexRoute;
  "/login/": typeof LoginIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ""
    | "/privacy"
    | "/products"
    | "/users"
    | "/login/reset"
    | "/"
    | "/login";
  fileRoutesByTo: FileRoutesByTo;
  to: "/privacy" | "/products" | "/users" | "/login/reset" | "/" | "/login";
  id:
    | "__root__"
    | "/_auth"
    | "/_auth/privacy"
    | "/_auth/products"
    | "/_auth/users"
    | "/login/reset"
    | "/_auth/"
    | "/login/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren;
  LoginResetRoute: typeof LoginResetRoute;
  LoginIndexRoute: typeof LoginIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  LoginResetRoute: LoginResetRoute,
  LoginIndexRoute: LoginIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/login/reset",
        "/login/"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/privacy",
        "/_auth/products",
        "/_auth/users",
        "/_auth/"
      ]
    },
    "/_auth/privacy": {
      "filePath": "_auth.privacy.tsx",
      "parent": "/_auth"
    },
    "/_auth/products": {
      "filePath": "_auth.products.tsx",
      "parent": "/_auth"
    },
    "/_auth/users": {
      "filePath": "_auth.users.tsx",
      "parent": "/_auth"
    },
    "/login/reset": {
      "filePath": "login/reset.tsx"
    },
    "/_auth/": {
      "filePath": "_auth.index.tsx",
      "parent": "/_auth"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
